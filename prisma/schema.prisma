// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    createdAt  DateTime @default(now())
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Clinics {
    id         String                  @default(uuid())
    createdAt  DateTime                @default(now())
    updatedAt  DateTime                @updatedAt
    name       String
    streetName String
    postalCode String                  @db.VarChar(4)
    city       String
    country    String
    resources  ResourcesInClinic[]
    services   ServicesWithResources[]

    @@unique([id])
}

model Resources {
    id           String                  @default(uuid())
    createdAt    DateTime                @default(now())
    updatedAt    DateTime                @updatedAt
    name         String
    services     ServicesWithResources[]
    appointments Appointments[]
    clinics      ResourcesInClinic[]

    @@unique([id])
}

model Services {
    id        String                  @default(uuid())
    createdAt DateTime                @default(now())
    updatedAt DateTime                @updatedAt
    name      String
    price     Int
    duration  Int
    resources ServicesWithResources[]

    @@unique([id])
}

model ServicesWithResources {
    id         String     @default(uuid())
    Services   Services?  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    serviceId  String
    Resources  Resources? @relation(fields: [resourceId], references: [id], onDelete: Cascade)
    resourceId String
    Clinics    Clinics?   @relation(fields: [clinicsId], references: [id], onDelete: Cascade)
    clinicsId  String?

    @@id([serviceId, resourceId])
}

model ResourcesInClinic {
    id          String     @default(uuid())
    Clinics     Clinics?   @relation(fields: [clinicsId], references: [id], onDelete: Cascade)
    clinicsId   String
    Resources   Resources? @relation(fields: [resourcesId], references: [id], onDelete: Cascade)
    resourcesId String

    @@id([clinicsId, resourcesId])
}

model Appointments {
    id          String    @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    resource    Resources @relation(fields: [resourcesId], references: [id])
    resourcesId String
    startTime   DateTime
    endTime     DateTime

    @@unique([id])
}
